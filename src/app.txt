import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import Peer from 'peerjs';
import { useParams, useLocation, useNavigate } from 'react-router-dom';

const App = () => {
  const { room } = useParams();
  const [roomId, setRoomId] = useState('');
  const [myPeerId, setMyPeerId] = useState('');
  const [peers, setPeers] = useState({});
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    const socket = io('http://localhost:3000');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(undefined, {
      path: '/peerjs',
      host: '/',
      port: '3000',
    });

    const myVideo = document.createElement('video');
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
      addVideoStream(myVideo, stream);

      myPeer.on('call', (call) => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
      });

      socket.on('user-joined', (roomId, userId) => {
        connectToNewUser(userId, stream);
      });

      socket.on('user-disconnected', (userId) => {
        if (peers[userId]) {
          peers[userId].close();
          delete peers[userId];
          setPeers({ ...peers });
        }
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove();
        });
        peers[userId] = call;
        setPeers({ ...peers });
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });
      
        // Check if videoGrid element exists
        const videoGrid = document.getElementById('video-grid');
        if (videoGrid) {
          videoGrid.append(video);
        } else {
          console.log('Video grid element not found');
        }
      }

      myPeer.on('open', (peerId) => {
        console.log('PeerJS connection established. ID:', peerId);
        setMyPeerId(peerId);
        navigate(`/${room}`); // Redirect to the room URL
        setRoomId(room);
        socket.emit('join-room', room, peerId);
      });
    });

    return () => {
      socket.disconnect();
      myPeer.destroy();
    };
  }, [room]);

  useEffect(() => {
    if (location.pathname === '/') {
      fetch('http://localhost:3000/')
        .then((response) => response.json())
        .then((data) => {
          const fetchedRoomId = data.roomId;
          console.log('Room ID:', fetchedRoomId);
          setRoomId(fetchedRoomId);
        })
        .catch((error) => {
          console.log('Error:', error);
        });
    }
  }, [location.pathname]);

  return (
    <div>
      {roomId ? (
        <div>
          <div>Room ID: {roomId}</div>
          <div id="video-grid"></div>
        </div>
      ) : (
        <div>Loading...</div>
      )}
    </div>
  );
};

export default App;
////'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import Peer from 'peerjs';
import { useParams, useLocation, useNavigate } from 'react-router-dom';

const App = () => {
  const { room } = useParams();
  const [roomId, setRoomId] = useState('');
  const [myPeerId, setMyPeerId] = useState('');
  const [peers, setPeers] = useState({});
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    const socket = io('http://localhost:3000');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(undefined, {
      path: '/peerjs',
      host: '/',
      port: '3000',
    });

    const myVideo = document.createElement('video');
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
      addVideoStream(myVideo, stream);

      myPeer.on('call', (call) => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
      });

      socket.on('user-joined', (roomId, userId) => {
        connectToNewUser(userId, stream);
      });

      socket.on('user-disconnected', (userId) => {
        if (peers[userId]) {
          peers[userId].close();
          delete peers[userId];
          setPeers({ ...peers });
        }
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove();
        });
        peers[userId] = call;
        setPeers({ ...peers });
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });
      
        // Check if videoGrid element exists
        const videoGrid = document.getElementById('video-grid');
        if (videoGrid) {
          videoGrid.append(video);
        } else {
          console.log('Video grid element not found');
        }
      }

      myPeer.on('open', (peerId) => {
        console.log('PeerJS connection established. ID:', peerId);
        setMyPeerId(peerId);
        navigate(`/${room}`); // Redirect to the room URL
        setRoomId(room);
        socket.emit('join-room', room, peerId);
      });
    });

    return () => {
      socket.disconnect();
      myPeer.destroy();
    };
  }, [room]);

  useEffect(() => {
    if (location.pathname === '/') {
      fetch('http://localhost:3000/')
        .then((response) => response.json())
        .then((data) => {
          const fetchedRoomId = data.roomId;
          console.log('Room ID:', fetchedRoomId);
          navigate(`/${fetchedRoomId}`); // Redirect to the room URL
          setRoomId(fetchedRoomId);
        })
        .catch((error) => {
          console.log('Error:', error);
        });
    } else {
      const currentRoom = location.pathname.substring(1); // Remove the leading slash
      setRoomId(currentRoom);
    }
  }, [location.pathname, navigate]);

  return (
    <div>
      {roomId ? (
        <div>
          <div>Room ID: {roomId}</div>
          <div id="video-grid"></div>
        </div>
      ) : (
        <div>Loading...</div>
      )}
    </div>
  );
};

export default App;

/////////////////////////////
import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import Peer from 'peerjs';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import './App.css';

const App = () => {
  const { room } = useParams();
  const [roomId, setRoomId] = useState('');
  const [myPeerId, setMyPeerId] = useState('');
  const [peers, setPeers] = useState({});
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    const socket = io('http://localhost:3000');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(undefined, {
      path: '/peerjs',
      host: '/',
      port: '3000',
    });

    const myVideo = document.createElement('video');
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
      addVideoStream(myVideo, stream);

      myPeer.on('call', (call) => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
      });

      socket.on('user-joined', (roomId, userId) => {
        connectToNewUser(userId, stream);
      });

      socket.on('user-disconnected', (userId) => {
        if (peers[userId]) {
          peers[userId].close();
          delete peers[userId];
          setPeers({ ...peers });
        }
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove();
        });
        peers[userId] = call;
        setPeers({ ...peers });
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });
      
        const videoContainer = document.createElement('div');
        videoContainer.className = 'video-container';
        videoContainer.appendChild(video);
      
        const videoGrid = document.getElementById('video-grid');
        if (videoGrid) {
          videoGrid.appendChild(videoContainer);
        } else {
          console.log('Video grid element not found');
        }
      }
      
      

      myPeer.on('open', (peerId) => {
        console.log('PeerJS connection established. ID:', peerId);
        setMyPeerId(peerId);
        navigate(`/${room}`); // Redirect to the room URL
        setRoomId(room);
        socket.emit('join-room', room, peerId);
      });
    });

    return () => {
      socket.disconnect();
      myPeer.destroy();
    };
  }, [room]);

  useEffect(() => {
    if (location.pathname === '/') {
      fetch('http://localhost:3000/')
        .then((response) => response.json())
        .then((data) => {
          const fetchedRoomId = data.roomId;
          console.log('Room ID:', fetchedRoomId);
          navigate(`/${fetchedRoomId}`); // Redirect to the room URL
          setRoomId(fetchedRoomId);
        })
        .catch((error) => {
          console.log('Error:', error);
        });
    } else {
      const currentRoom = location.pathname.substring(1); // Remove the leading slash
      setRoomId(currentRoom);
    }
  }, [location.pathname, navigate]);

  return (
    <div>
      {roomId ? (
        <div>
          <div>Room ID: {roomId}</div>
          <div id="video-grid"></div>
        </div>
      ) : (
        <div>Loading...</div>
      )}
    </div>
  );
};

export default App;
