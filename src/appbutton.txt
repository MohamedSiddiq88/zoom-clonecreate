import React, { useEffect, useState } from 'react';
import { io } from 'socket.io-client';
import Peer from 'peerjs';
import { useParams, useNavigate } from 'react-router-dom';

const App = () => {
  const { room } = useParams();
  const [roomId, setRoomId] = useState('');
  const [myPeerId, setMyPeerId] = useState('');
  const [peers, setPeers] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    const socket = io('http://localhost:3000');
    const videoGrid = document.getElementById('video-grid');
    const myPeer = new Peer(undefined, {
      path: '/peerjs',
      host: '/',
      port: '3000',
    });

    const myVideo = document.createElement('video');
    myVideo.muted = true;

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {
      addVideoStream(myVideo, stream);

      myPeer.on('call', (call) => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
      });

      socket.on('user-joined', (roomId, userId) => {
        connectToNewUser(userId, stream);
      });

      socket.on('user-disconnected', (userId) => {
        if (peers[userId]) {
          peers[userId].close();
          delete peers[userId];
          setPeers({ ...peers });
        }
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove();
        });
        peers[userId] = call;
        setPeers({ ...peers });
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });

        // Check if videoGrid element exists
        const videoGrid = document.getElementById('video-grid');
        if (videoGrid) {
          videoGrid.append(video);
        } else {
          console.log('Video grid element not found');
        }
      }

      myPeer.on('open', (peerId) => {
        console.log('PeerJS connection established. ID:', peerId);
        setMyPeerId(peerId);
        if (room) {
          navigate(`/${room}`); // Redirect to the room URL if room parameter is available
          setRoomId(room);
          socket.emit('join-room', room, peerId);
        }
      });
    });

    return () => {
      socket.disconnect();
      myPeer.destroy();
    };
  }, [room, navigate]);

  return (
    <div>
      {roomId ? (
        <div>
          <div>Room ID: {roomId}</div>
          <div id="video-grid"></div>
        </div>
      ) : (
        <button onClick={() => navigate(`/${roomId}`)}>Join Room</button>
      )}
    </div>
  );
};

export default App;
