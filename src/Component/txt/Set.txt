import React, { useEffect, useRef, useState } from 'react';
import { useParams } from 'react-router-dom';
import Peer from 'peerjs';
import io from 'socket.io-client';

const socket = io('http://localhost:3001/');

function Room() {
  const { roomId } = useParams();
  const [peerId, setPeerId] = useState('');
  const remoteVideoRefs = useRef({});
  const currentUserVideoRef = useRef(null);
  const [connectedUsers, setConnectedUsers] = useState(new Set());
  const peerInstance = useRef(null);

  useEffect(() => {
    const initializePeer = async () => {
      const peer = new Peer();

      peer.on('open', (id) => {
        setPeerId(id);
        socket.emit('join-conference', roomId, id);
      });

      peer.on('call', (call) => {
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
          .then((mediaStream) => {
            const remotePeerId = call.peer;
            remoteVideoRefs.current[remotePeerId] = remoteVideoRefs.current[remotePeerId] || React.createRef();

            if (!connectedUsers.has(remotePeerId)) {
              setConnectedUsers((prevConnectedUsers) => new Set([...prevConnectedUsers, remotePeerId]));
            }

            currentUserVideoRef.current.srcObject = mediaStream;
            currentUserVideoRef.current.play();

            call.answer(mediaStream);
            call.on('stream', (remoteStream) => {
              remoteVideoRefs.current[remotePeerId].current.srcObject = remoteStream;
              remoteVideoRefs.current[remotePeerId].current.play();
            });
          })
          .catch((error) => {
            console.error('Error accessing media devices:', error);
            alert('Failed to access media devices. Please ensure you have a camera and microphone available and grant permission to access them.');
          });
      });

      peerInstance.current = peer;
    };

    initializePeer();
  }, [roomId]);

  const call = (remotePeerId) => {
    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then((mediaStream) => {
        const call = peerInstance.current.call(remotePeerId, mediaStream);
        remoteVideoRefs.current[remotePeerId] = remoteVideoRefs.current[remotePeerId] || React.createRef();

        if (!connectedUsers.has(remotePeerId)) {
          setConnectedUsers((prevConnectedUsers) => new Set([...prevConnectedUsers, remotePeerId]));
        }

        currentUserVideoRef.current.srcObject = mediaStream;
        currentUserVideoRef.current.play();

        call.on('stream', (remoteStream) => {
          remoteVideoRefs.current[remotePeerId].current.srcObject = remoteStream;
          remoteVideoRefs.current[remotePeerId].current.play();
        });
      })
      .catch((error) => {
        console.error('Error accessing media devices:', error);
        alert('Failed to access media devices. Please ensure you have a camera and microphone available and grant permission to access them.');
      });
  };

  useEffect(() => {
    const handleNewUser = (userId) => {
      // Only call the new user if it is not the current user
      if (userId !== peerId) {
        // Only initiate the call if the current user is not already connected to the new user
        if (!connectedUsers.has(userId)) {
          call(userId);
        }
      }
    };

    const handleUserDisconnected = (userId) => {
      if (remoteVideoRefs.current[userId]) {
        delete remoteVideoRefs.current[userId];
      }

      setConnectedUsers((prevConnectedUsers) => {
        const newConnectedUsers = new Set(prevConnectedUsers);
        newConnectedUsers.delete(userId);
        return newConnectedUsers;
      });
    };

    socket.on('new-user', handleNewUser);
    socket.on('user-disconnected', handleUserDisconnected);

    return () => {
      socket.off('new-user', handleNewUser);
      socket.off('user-disconnected', handleUserDisconnected);
    };
  }, [connectedUsers, peerId]);

  return (
    <div>
      <h2>Current room ID is {roomId}</h2>
      <h3>Connected Users:{peerId}</h3>

      <h3>Connected Users:</h3>
      <ul>
        {[...connectedUsers].map((user) => (
          <li key={user}>{user}</li>
        ))}
      </ul>
      <div>
        <video ref={currentUserVideoRef} style={{ width: '300px', height: '200px' }} autoPlay muted />
      </div>
      <div>
        {[...connectedUsers].map((user) => (
          <video
            key={user}
            ref={remoteVideoRefs.current[user]}
            style={{ width: '300px', height: '200px' }}
            autoPlay
          />
        ))}
      </div>
    </div>
  );
}

export default Room;



const express = require('express');
const cors = require('cors');
const http = require('http');
const socketIO = require('socket.io');
const { ExpressPeerServer } = require('peer');

const app = express();
app.use(cors());

const server = http.createServer(app);

const io = socketIO(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
  },
});

const peerServer = ExpressPeerServer(server, {
  path: '/peer',
});

app.use('/peerjs', peerServer);

const connectedUsers = new Map(); // Track the connected users

io.on('connection', (socket) => {
  console.log('User connected');

  socket.on('join-conference', (roomId, userId) => {
    console.log(`User joined conference: Room ${roomId}, User ${userId}`);
    socket.join(roomId);
    connectedUsers.set(socket.id, userId);
    io.to(roomId).emit('new-user', userId);

    const connectedUserIds = Array.from(connectedUsers.values());
    socket.emit('user-list', connectedUserIds);
  });

  socket.on('disconnect', () => {
    console.log('User disconnected');
    const userId = connectedUsers.get(socket.id);
    connectedUsers.delete(socket.id);

    if (userId) {
      io.emit('user-disconnected', userId);
    }
  });
});

const port = 3001;
server.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
