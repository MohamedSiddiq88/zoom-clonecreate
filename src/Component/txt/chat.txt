import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';

function Chat() {
  const [message, setMessage] = useState('');
  const [socket, setSocket] = useState(null);
  const [receivedMessages, setReceivedMessages] = useState([]);

  useEffect(() => {
    // Connect to the server using socket.io
    const newSocket = io('http://localhost:3001/');
    setSocket(newSocket);

    // Listen for incoming messages
    newSocket.on('message', (message) => {
      setReceivedMessages((prevMessages) => [...prevMessages, message]);
    });

    // Cleanup function to disconnect socket on unmount
    return () => {
      newSocket.disconnect();
    };
  }, []);

  const handleMessageChange = (event) => {
    setMessage(event.target.value);
  };

  const handleSendMessage = () => {
    if (socket) {
      // Emit the message to the server
      socket.emit('message', message);
    }

    // Clear the message input
    setMessage('');
  };

  return (
    <div>
      <div>
        {receivedMessages.map((msg, index) => (
          <p key={index}>{msg}</p>
        ))}
      </div>
      <input
        type="text"
        value={message}
        onChange={handleMessageChange}
        placeholder="Enter your message"
      />
      <button onClick={handleSendMessage}>Send</button>
    </div>
  );
}

export default Chat;

//server
// server.js
const app = require('express')();
const cors = require('cors');
const http = require('http').Server(app);
const io = require('socket.io')(http, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
  },
});

app.use(cors()); // Enable CORS for all routes

io.on('connection', (socket) => {
  console.log('User connected');

  socket.on('join-conference', (roomId, userId) => {
    console.log(`User joined conference: Room ${roomId}, User ${userId}`);
    socket.join(roomId); // Join the specified room
    socket.to(roomId).emit('new-user', userId); // Notify all other users in the room about the new user
  });

  socket.on('user-disconnected', (roomId, userId) => {
    console.log(`User disconnected: Room ${roomId}, User ${userId}`);
    socket.to(roomId).emit('user-disconnected', userId); // Notify all other users in the room about the disconnected user
  });

  socket.on('message', (message) => {
    console.log(`Received message: ${message}`);
    io.emit('message', message); // Broadcast the message to all connected clients
  });

  socket.on('disconnect', () => {
    console.log('User disconnected');
    const rooms = Object.keys(socket.rooms);
    rooms.forEach((room) => {
      if (room !== socket.id) {
        socket.to(room).emit('user-disconnected', socket.id); // Notify all other users in the room about the disconnected user
      }
    });
  });
});

const port = 3001; // Choose any available port number
http.listen(port, () => {
  console.log(`Signaling server is running on port ${port}`);
});
