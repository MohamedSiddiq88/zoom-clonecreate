const express = require('express');
const cors = require('cors');
const http = require('http');
const socketIO = require('socket.io');

const app = express();
app.use(cors());
const server = http.createServer(app);
const io = socketIO(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
  },
});

const PORT = 5000;

io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('joinRoom', (room) => {
    // Join the specified room
    socket.join(room);
  });

  // Event listener for receiving messages
  socket.on('message', ({ room, message }) => {
    // Broadcast the message to all clients in the room
    io.to(room).emit('message', message);
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});

server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});



//client 
import React, { useEffect, useState } from 'react';
import io from 'socket.io-client';

const socket = io('http://localhost:5000'); // Replace with your server URL

const App = () => {
  const [room, setRoom] = useState('');
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    // Event listener for receiving messages
    socket.on('message', (message) => {
      setMessages((messages) => [...messages, message]);
    });

    return () => {
      // Clean up event listener
      socket.off('message');
    };
  }, []);

  const handleJoinRoom = (e) => {
    e.preventDefault();
    if (room.trim() !== '') {
      socket.emit('joinRoom', room);
    }
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (message.trim() !== '') {
      // Emit the message to the server
      socket.emit('message', { room, message });
      setMessage('');
    }
  };

  return (
    <div>
      <h2>Chat Room</h2>
      <form onSubmit={handleJoinRoom}>
        <input
          type="text"
          placeholder="Enter room name"
          value={room}
          onChange={(e) => setRoom(e.target.value)}
        />
        <button type="submit">Join Room</button>
      </form>
      <div>
        {messages.map((msg, index) => (
          <p key={index}>{msg}</p>
        ))}
      </div>
      <form onSubmit={handleSendMessage}>
        <input
          type="text"
          placeholder="Enter message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default App;
