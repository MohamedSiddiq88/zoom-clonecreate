// Server-side code
// ... (existing code)

io.on("connection", (socket) => {
  console.log(`User Connected: ${socket.id}`)
  connectedUsersCount++;
  io.emit("connectedUsersCount", connectedUsersCount);

  socket.on("joinMeeting", () => {
    // Send existing streams to the newly joined user
    for (const stream of activeStreams) {
      socket.emit("newStream", { stream, muted: false }); // Set muted to false for all existing streams
    }
    // Add the new user's stream to activeStreams set
    activeStreams.add(socket.id);

    // Broadcast the new stream to other users
    socket.broadcast.emit("newStream", { stream: socket.id, muted: true }); // Set muted to true for the new user's stream
  });

  socket.on("disconnect", () => {
    connectedUsersCount--;
    io.emit("connectedUsersCount", connectedUsersCount);

    // Remove the disconnected user's stream from activeStreams set
    activeStreams.delete(socket.id);
    // Notify other users to remove the disconnected user's stream
    socket.broadcast.emit("removeStream", socket.id);
  });
});

// ... (existing code)
// Client-side code
// ... (existing code)

function App() {
  const [localStream, setLocalStream] = useState(null);
  const [connectedUsersCount, setConnectedUsersCount] = useState(0);
  const [remoteStreams, setRemoteStreams] = useState(new Map()); // Store remote streams with socket id as the key
  const videoRef = useRef();

  useEffect(() => {
    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((stream) => {
        setLocalStream(stream);
        videoRef.current.srcObject = stream;
        socket.emit("joinMeeting");
      })
      .catch((error) =>
        console.error("Error accessing media devices:", error)
      );

    socket.on("connectedUsersCount", (count) => {
      setConnectedUsersCount(count);
    });

    socket.on("newStream", ({ stream, muted }) => {
      // Create a new video element to display the remote stream
      const newVideoElement = document.createElement("video");
      newVideoElement.autoplay = true;
      newVideoElement.muted = muted; // Set the muted property based on the flag
      newVideoElement.style.width = "300px";
      newVideoElement.style.height = "200px";
      newVideoElement.setAttribute("data-socket", stream); // Set socket id as a data attribute

      // Add the new video element to the DOM
      document.body.appendChild(newVideoElement);

      // Get the remote stream and add it to the remoteStreams state
      navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
          newVideoElement.srcObject = stream;
          setRemoteStreams((prev) => new Map(prev).set(stream, muted));
        })
        .catch((error) =>
          console.error("Error accessing remote media devices:", error)
        );
    });

    socket.on("removeStream", (stream) => {
      // Remove the video element and the remote stream from the state
      const videoElementToRemove = document.querySelector(
        `video[data-socket="${stream}"]`
      );
      if (videoElementToRemove) {
        videoElementToRemove.srcObject = null;
        videoElementToRemove.remove();
      }
      setRemoteStreams((prev) => {
        const newMap = new Map(prev);
        newMap.delete(stream);
        return newMap;
      });
    });

    return () => {
      socket.disconnect();
    };
  }, []);

  return (
    <div>
      <h1>Zoom Clone</h1>
      <div>
        <video
          ref={videoRef}
          autoPlay
          muted
          style={{ width: "300px", height: "200px" }}
        />
      </div>
      <div>Connected Users: {connectedUsersCount}</div>
    </div>
  );
}

export default App;
